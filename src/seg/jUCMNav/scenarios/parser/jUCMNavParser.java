/* Generated By:JJTree&JavaCC: Do not edit this line. jUCMNavParser.java */
package seg.jUCMNav.scenarios.parser;

public class jUCMNavParser/* @bgen(jjtree) */implements jUCMNavParserTreeConstants, jUCMNavParserConstants {/* @bgen(jjtree) */
    protected static JJTjUCMNavParserState jjtree = new JJTjUCMNavParserState();

    public static void main(String args[]) {
        System.out.println("Reading from standard input..."); //$NON-NLS-1$
        jUCMNavParser t = new jUCMNavParser(System.in);
        try {
            SimpleNode n = jUCMNavParser.Start();
            n.dump(""); //$NON-NLS-1$
            System.out.println("Thank you."); //$NON-NLS-1$
        } catch (Exception e) {
            System.out.println("Oops."); //$NON-NLS-1$
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    static final public SimpleNode Start() throws ParseException {
        /* @bgen(jjtree) Start */
        SimpleNode jjtn000 = new SimpleNode(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            Expression();
            jj_consume_token(0);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {
                if (true)
                    return jjtn000;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function"); //$NON-NLS-1$
    }

    static final public SimpleNode StartResponsibility() throws ParseException {
        /* @bgen(jjtree) StartResponsibility */
        SimpleNode jjtn000 = new SimpleNode(JJTSTARTRESPONSIBILITY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            label_1: while (true) {
                Statement();
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 7:
                case IF:
                case IDENTIFIER:
                    ;
                    break;
                default:
                    jj_la1[0] = jj_gen;
                    break label_1;
                }
            }
            jj_consume_token(0);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            {
                if (true)
                    return jjtn000;
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte000;
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte000;
                }
            }
            {
                if (true)
                    throw (Error) jjte000;
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function"); //$NON-NLS-1$
    }

    static final public void Statement() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case IDENTIFIER:
            Assignment();
            break;
        case 7:
            CompoundStatement();
            break;
        case IF:
            IfStatement();
            break;
        default:
            jj_la1[1] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    static final public void Assignment() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTASSIGNMENT);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Identifier();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case EQUALS:
                jj_consume_token(EQUALS);
                break;
            case ASSIGNMENTOPERATOR:
                jj_consume_token(ASSIGNMENTOPERATOR);
                break;
            default:
                jj_la1[2] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
            Expression();
            jj_consume_token(STATEMENTTERMINATOR);
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte001;
                }
            }
            {
                if (true)
                    throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    static final public void CompoundStatement() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTCOMPOUNDSTATEMENT);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            jj_consume_token(7);
            label_2: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 7:
                case IF:
                case IDENTIFIER:
                    ;
                    break;
                default:
                    jj_la1[3] = jj_gen;
                    break label_2;
                }
                Statement();
            }
            jj_consume_token(8);
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte001;
                }
            }
            {
                if (true)
                    throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 0);
            }
        }
    }

    static final public void IfStatement() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTIFSTATEMENT);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            jj_consume_token(IF);
            Expression();
            Statement();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case ELSE:
                jj_consume_token(ELSE);
                Statement();
                break;
            default:
                jj_la1[4] = jj_gen;
                ;
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte001;
                }
            }
            {
                if (true)
                    throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    static final public void Expression() throws ParseException {
        Implication();
    }

    static final public void Implication() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTIMPLICATION);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Disjunction();
            label_3: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 9:
                    ;
                    break;
                default:
                    jj_la1[5] = jj_gen;
                    break label_3;
                }
                jj_consume_token(9);
                Disjunction();
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte001;
                }
            }
            {
                if (true)
                    throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    static final public void Disjunction() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTDISJUNCTION);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Conjunction();
            label_4: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OR:
                case XOR:
                    ;
                    break;
                default:
                    jj_la1[6] = jj_gen;
                    break label_4;
                }
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case OR:
                    InclusiveDisjunction();
                    break;
                case XOR:
                    ExclusiveDisjunction();
                    break;
                default:
                    jj_la1[7] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                Conjunction();
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte001;
                }
            }
            {
                if (true)
                    throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    static final public void InclusiveDisjunction() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTINCLUSIVEDISJUNCTION);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            jj_consume_token(OR);
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    static final public void ExclusiveDisjunction() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTEXCLUSIVEDISJUNCTION);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            jj_consume_token(XOR);
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    static final public void Conjunction() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTCONJUNCTION);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Comparison();
            label_5: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case AND:
                    ;
                    break;
                default:
                    jj_la1[8] = jj_gen;
                    break label_5;
                }
                jj_consume_token(AND);
                Comparison();
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte001;
                }
            }
            {
                if (true)
                    throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    static final public void Comparison() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTCOMPARISON);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            BooleanUnit();
            label_6: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case EQUALS:
                case DOUBLEEQUALS:
                case NOTEQUALS:
                    ;
                    break;
                default:
                    jj_la1[9] = jj_gen;
                    break label_6;
                }
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case EQUALS:
                case DOUBLEEQUALS:
                    Equality();
                    break;
                case NOTEQUALS:
                    Inequality();
                    break;
                default:
                    jj_la1[10] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                }
                BooleanUnit();
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte001;
                }
            }
            {
                if (true)
                    throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    static final public void Equality() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTEQUALITY);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case EQUALS:
                jj_consume_token(EQUALS);
                break;
            case DOUBLEEQUALS:
                jj_consume_token(DOUBLEEQUALS);
                break;
            default:
                jj_la1[11] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    static final public void Inequality() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTINEQUALITY);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            jj_consume_token(NOTEQUALS);
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    static final public void Negation() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTNEGATION);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            jj_consume_token(NOT);
            BooleanUnit();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte001;
                }
            }
            {
                if (true)
                    throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, 1);
            }
        }
    }

    static final public void BooleanUnit() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case NOT:
            Negation();
            break;
        case 10:
        case 16:
        case 17:
        case INTEGER:
        case IDENTIFIER:
            RelationalExpression();
            break;
        case BOOLEAN:
            BooleanConstant();
            break;
        default:
            jj_la1[12] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    static final public void RelationalExpression() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTRELATIONALEXPRESSION);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            AdditiveExpression();
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 12:
            case 13:
            case 14:
            case 15:
                RelationalOperation();
                AdditiveExpression();
                break;
            default:
                jj_la1[13] = jj_gen;
                ;
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte001;
                }
            }
            {
                if (true)
                    throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    static final public void RelationalOperation() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTRELATIONALOPERATION);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 12:
                GreaterThan();
                break;
            case 13:
                GreaterOrEqualTo();
                break;
            case 14:
                LowerThan();
                break;
            case 15:
                LowerOrEqualTo();
                break;
            default:
                jj_la1[14] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte001;
                }
            }
            {
                if (true)
                    throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, false);
            }
        }
    }

    static final public void AdditiveExpression() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTADDITIVEEXPRESSION);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            MultiplicativeExpression();
            label_7: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 16:
                case 17:
                    ;
                    break;
                default:
                    jj_la1[15] = jj_gen;
                    break label_7;
                }
                AdditiveOperator();
                MultiplicativeExpression();
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte001;
                }
            }
            {
                if (true)
                    throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    static final public void MultiplicativeExpression() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
            label_8: while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 18:
                    ;
                    break;
                default:
                    jj_la1[16] = jj_gen;
                    break label_8;
                }
                MultiplicativeOperator();
                UnaryExpression();
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true)
                        throw (RuntimeException) jjte001;
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true)
                        throw (ParseException) jjte001;
                }
            }
            {
                if (true)
                    throw (Error) jjte001;
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
            }
        }
    }

    static final public void UnaryExpression() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case 16:
        case 17:
            AdditiveComplementOperator();
            break;
        default:
            jj_la1[17] = jj_gen;
            ;
        }
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case 10:
            jj_consume_token(10);
            Expression();
            jj_consume_token(11);
            break;
        case INTEGER:
            IntegerConstant();
            break;
        case IDENTIFIER:
            Identifier();
            break;
        default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    static final public void AdditiveOperator() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case 16:
            Addition();
            break;
        case 17:
            Substraction();
            break;
        default:
            jj_la1[19] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    static final public void AdditiveComplementOperator() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
        case 16:
            Addition();
            break;
        case 17:
            Substraction();
            break;
        default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
        }
    }

    static final public void MultiplicativeOperator() throws ParseException {
        Multiplication();
    }

    static final public void GreaterThan() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTGREATERTHAN);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            jj_consume_token(12);
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    static final public void GreaterOrEqualTo() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTGREATEROREQUALTO);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            jj_consume_token(13);
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    static final public void LowerThan() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTLOWERTHAN);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            jj_consume_token(14);
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    static final public void LowerOrEqualTo() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTLOWEROREQUALTO);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            jj_consume_token(15);
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    static final public void Addition() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTADDITION);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            jj_consume_token(16);
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    static final public void Substraction() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTSUBSTRACTION);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            jj_consume_token(17);
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    static final public void Multiplication() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTMULTIPLICATION);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            jj_consume_token(18);
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    static final public void BooleanConstant() throws ParseException {
        /* @bgen(jjtree) BooleanConstant */
        SimpleNode jjtn000 = new SimpleNode(JJTBOOLEANCONSTANT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(BOOLEAN);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setText(t.image);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void IntegerConstant() throws ParseException {
        /* @bgen(jjtree) IntegerConstant */
        SimpleNode jjtn000 = new SimpleNode(JJTINTEGERCONSTANT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(INTEGER);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setText(t.image);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static final public void Identifier() throws ParseException {
        /* @bgen(jjtree) Identifier */
        SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(IDENTIFIER);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setText(t.image);
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    static private boolean jj_initialized_once = false;
    static public jUCMNavParserTokenManager token_source;
    static SimpleCharStream jj_input_stream;
    static public Token token, jj_nt;
    static private int jj_ntk;
    static private int jj_gen;
    static final private int[] jj_la1 = new int[21];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static {
        jj_la1_0();
        jj_la1_1();
    }

    private static void jj_la1_0() {
        jj_la1_0 = new int[] { 0x8000080, 0x8000080, 0x4400000, 0x8000080, 0x10000000, 0x200, 0x300000, 0x300000, 0x80000, 0x1c00000, 0x1c00000, 0xc00000,
                0xc2030400, 0xf000, 0xf000, 0x30000, 0x40000, 0x30000, 0x80000400, 0x30000, 0x30000, };
    }

    private static void jj_la1_1() {
        jj_la1_1 = new int[] { 0x1, 0x1, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, };
    }

    public jUCMNavParser(java.io.InputStream stream) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  You must"); //$NON-NLS-1$
            System.out.println("       either use ReInit() or set the JavaCC option STATIC to false"); //$NON-NLS-1$
            System.out.println("       during parser generation."); //$NON-NLS-1$
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new jUCMNavParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
    }

    static public void ReInit(java.io.InputStream stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        jUCMNavParserTokenManager.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
    }

    public jUCMNavParser(java.io.Reader stream) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  You must"); //$NON-NLS-1$
            System.out.println("       either use ReInit() or set the JavaCC option STATIC to false"); //$NON-NLS-1$
            System.out.println("       during parser generation."); //$NON-NLS-1$
            throw new Error();
        }
        jj_initialized_once = true;
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new jUCMNavParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
    }

    static public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        jUCMNavParserTokenManager.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
    }

    public jUCMNavParser(jUCMNavParserTokenManager tm) {
        if (jj_initialized_once) {
            System.out.println("ERROR: Second call to constructor of static parser.  You must"); //$NON-NLS-1$
            System.out.println("       either use ReInit() or set the JavaCC option STATIC to false"); //$NON-NLS-1$
            System.out.println("       during parser generation."); //$NON-NLS-1$
            throw new Error();
        }
        jj_initialized_once = true;
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
    }

    public void ReInit(jUCMNavParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 21; i++)
            jj_la1[i] = -1;
    }

    static final private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null)
            token = token.next;
        else
            token = token.next = jUCMNavParserTokenManager.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    static final public Token getNextToken() {
        if (token.next != null)
            token = token.next;
        else
            token = token.next = jUCMNavParserTokenManager.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    static final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null)
                t = t.next;
            else
                t = t.next = jUCMNavParserTokenManager.getNextToken();
        }
        return t;
    }

    static final private int jj_ntk() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = jUCMNavParserTokenManager.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    static private java.util.Vector jj_expentries = new java.util.Vector();
    static private int[] jj_expentry;
    static private int jj_kind = -1;

    static public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[35];
        for (int i = 0; i < 35; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 21; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 35; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    static final public void enable_tracing() {
    }

    static final public void disable_tracing() {
    }

}
