/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. jucmnavparser.jj */
/*@egen*//*
JJTree file for jUCMNav's condition syntax. 

	Needs JavaCC 3.2 ... 4.0 doesn't seem to work
	
	See: http://jucmnav.softwareengineering.ca/twiki/bin/view/ProjetSEG/UcmScenariosDataModel

*/

options {
	LOOKAHEAD=1;
}

PARSER_BEGIN(jUCMNavParser)
package seg.jUCMNav.scenarios.parser;
public class jUCMNavParser/*@bgen(jjtree)*/implements jUCMNavParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTjUCMNavParserState jjtree = new JJTjUCMNavParserState();

/*@egen*/
  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    jUCMNavParser t = new jUCMNavParser(System.in);
    try {
      SimpleNode n = t.Start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}

PARSER_END(jUCMNavParser)



SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n"|"\0")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
}


SimpleNode Start() : {/*@bgen(jjtree) Start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  Expression() <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

SimpleNode StartResponsibility() : {/*@bgen(jjtree) StartResponsibility */
  SimpleNode jjtn000 = new SimpleNode(JJTSTARTRESPONSIBILITY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StartResponsibility */
  try {
/*@egen*/
  (Statement())+ <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Statement()       : {}
{
	(Assignment() | CompoundStatement() | IfStatement())
}

void Assignment()       : {}
{/*@bgen(jjtree) #Assignment(> 1) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTASSIGNMENT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(Identifier() (<EQUALS> | <ASSIGNMENTOPERATOR>) Expression() <STATEMENTTERMINATOR>)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void CompoundStatement()       : {}
{/*@bgen(jjtree) #CompoundStatement(> 0) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTCOMPOUNDSTATEMENT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	( "{" (Statement())* "}" )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 0);
          }
        }
/*@egen*/
}

void IfStatement()       : {}
{/*@bgen(jjtree) #IfStatement(> 1) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTIFSTATEMENT);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	( <IF> Expression() Statement()(<ELSE> Statement())? )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void Expression()       : {}
{
   ( Implication() )
}

void Implication()       : {}
{/*@bgen(jjtree) #Implication(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTIMPLICATION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( (Disjunction() ( "=>" Disjunction() )*) )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void Disjunction()       : {}
{/*@bgen(jjtree) #Disjunction(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTDISJUNCTION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( Conjunction() (( InclusiveDisjunction() | ExclusiveDisjunction()) Conjunction()  )* )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void InclusiveDisjunction()       : {}
{/*@bgen(jjtree) #InclusiveDisjunction( true) */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTINCLUSIVEDISJUNCTION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( <OR> )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  true);
    }
  }
/*@egen*/
}

void ExclusiveDisjunction()       : {}
{/*@bgen(jjtree) #ExclusiveDisjunction( true) */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTEXCLUSIVEDISJUNCTION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( <XOR> )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  true);
    }
  }
/*@egen*/
}

void Conjunction()       : {}
{/*@bgen(jjtree) #Conjunction(> 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTCONJUNCTION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( Comparison() ( <AND> Comparison() )* )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void Comparison()       : {}
{/*@bgen(jjtree) #Comparison(> 1) */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTCOMPARISON);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   ( BooleanUnit() ((Equality() | Inequality()) BooleanUnit())* )/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
     }
   }
/*@egen*/
}

void Equality()       : {}
{/*@bgen(jjtree) #Equality( true) */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTEQUALITY);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   ( <EQUALS> | <DOUBLEEQUALS> )/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001,  true);
     }
   }
/*@egen*/
}

void Inequality()       : {}
{/*@bgen(jjtree) #Inequality( true) */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTINEQUALITY);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   ( <NOTEQUALS> )/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001,  true);
     }
   }
/*@egen*/
}

void Negation()       : {}
{/*@bgen(jjtree) #Negation( 1) */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTNEGATION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ( <NOT> BooleanUnit() )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  1);
    }
  }
/*@egen*/
}

void BooleanUnit()       : {}
{
  ( Negation() | RelationalExpression() | BooleanConstant() )
}

void RelationalExpression()       :  {}
{/*@bgen(jjtree) #RelationalExpression(> 1) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTRELATIONALEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(AdditiveExpression() (RelationalOperation()  AdditiveExpression())?)/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void RelationalOperation()       : { }
{/*@bgen(jjtree) #RelationalOperation( false) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTRELATIONALOPERATION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	(GreaterThan() | GreaterOrEqualTo() | LowerThan() | LowerOrEqualTo() )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  false);
          }
        }
/*@egen*/
}

void AdditiveExpression()       : {}
{/*@bgen(jjtree) #AdditiveExpression(> 1) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTADDITIVEEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	( MultiplicativeExpression()  ( (AdditiveOperator())  MultiplicativeExpression() )* )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void MultiplicativeExpression()       : {}
{/*@bgen(jjtree) #MultiplicativeExpression(> 1) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTMULTIPLICATIVEEXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/
	( UnaryExpression()  ( MultiplicativeOperator() UnaryExpression() )* )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void UnaryExpression()       : {}
{
	 (AdditiveComplementOperator())? (("(" Expression() ")") | IntegerConstant() | Identifier()) 
}

void AdditiveOperator()       : { }
{
	( Addition() | Substraction() )
}

void AdditiveComplementOperator()        : { }
{
	( Addition() | Substraction() )
}

void MultiplicativeOperator()        : { }
{
   ( Multiplication() ) 
}
void GreaterThan()       : { }
{/*@bgen(jjtree) #GreaterThan( true) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTGREATERTHAN);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ 
	(	">" )/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  true);
          }
        }
/*@egen*/
}

void GreaterOrEqualTo()        : { }
{/*@bgen(jjtree) #GreaterOrEqualTo( true) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTGREATEROREQUALTO);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/	
	( ">=" )/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  true);
          }
        }
/*@egen*/
}

void LowerThan()        : { }
{/*@bgen(jjtree) #LowerThan( true) */
 {
   SimpleNode jjtn001 = new SimpleNode(JJTLOWERTHAN);
   boolean jjtc001 = true;
   jjtree.openNodeScope(jjtn001);
 }
 try {
/*@egen*/
 ( "<" )/*@bgen(jjtree)*/
 } finally {
   if (jjtc001) {
     jjtree.closeNodeScope(jjtn001,  true);
   }
 }
/*@egen*/
}

void LowerOrEqualTo()        : { }
{/*@bgen(jjtree) #LowerOrEqualTo( true) */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTLOWEROREQUALTO);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ 	
  ( "<=" )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  true);
    }
  }
/*@egen*/
}

void Addition()        : { }
{/*@bgen(jjtree) #Addition( true) */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTADDITION);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/ ( "+" )/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  true);
    }
  }
/*@egen*/
}

void Substraction()        : {} 
{/*@bgen(jjtree) #Substraction( true) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTSUBSTRACTION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ 
	( "-" )/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  true);
          }
        }
/*@egen*/
}

void Multiplication()        : { }
{/*@bgen(jjtree) #Multiplication( true) */
        {
          SimpleNode jjtn001 = new SimpleNode(JJTMULTIPLICATION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*/ 
	( "*" )/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  true);
          }
        }
/*@egen*/
}



void BooleanConstant() : {/*@bgen(jjtree) BooleanConstant */
                           SimpleNode jjtn000 = new SimpleNode(JJTBOOLEANCONSTANT);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } 
{/*@bgen(jjtree) BooleanConstant */
        try {
/*@egen*/
	t=<BOOLEAN>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { jjtn000.setText( t.image );}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void IntegerConstant() : {/*@bgen(jjtree) IntegerConstant */
                           SimpleNode jjtn000 = new SimpleNode(JJTINTEGERCONSTANT);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } 
{/*@bgen(jjtree) IntegerConstant */
        try {
/*@egen*/
	t=<INTEGER>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { jjtn000.setText( t.image );}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void Identifier() : {/*@bgen(jjtree) Identifier */
                      SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } 
{/*@bgen(jjtree) Identifier */
        try {
/*@egen*/
	t=<IDENTIFIER>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/ { jjtn000.setText( t.image );}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}


TOKEN : 
{
	< AND: ("and" | "&&") >
}


TOKEN : 
{
	< OR: ("or" | "||") >
}

TOKEN : 
{
	< XOR: ("xor" | "^") >
}

TOKEN : 
{
	< EQUALS: ("=") >
}

/* split out here for LL(1) conflict with assignment */
TOKEN : 
{
	< DOUBLEEQUALS: ("==") >
}

TOKEN : 
{
	< NOTEQUALS: ("/=" | "!=") >
}

TOKEN : 
{
	< NOT: ("not" | "!") >
}


TOKEN : 
{
	< ASSIGNMENTOPERATOR: (":=") >
}

TOKEN : 
{
	< IF: ("if") >
}

TOKEN : 
{
	< ELSE: ("else") >
}

TOKEN : 
{
	< STATEMENTTERMINATOR: (";") >
}


TOKEN : 
{
	< BOOLEAN: ("true" | "false") >
}

TOKEN : 
{
	< INTEGER: (["0"-"9"])+ >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}

