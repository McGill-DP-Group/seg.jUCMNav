/* Generated By:JJTree: Do not edit this line. SimpleNode.java */

package seg.jUCMNav.scenarios.parser;

import seg.jUCMNav.scenarios.evaluator.UcmExpressionEvaluator;
import seg.jUCMNav.scenarios.model.UcmEnvironment;
import seg.jUCMNav.scenarios.model.jUCMNavType;

public class SimpleNode implements Node {
    protected Node parent;
    protected Node[] children;
    protected int id;
    protected jUCMNavParser parser;

    String m_text;

    /**
     * 
     * @param text
     *            the token
     */
    public void setText(String text) {
        m_text = text;
    }

    /**
     * 
     * @return the actual token
     */
    public String getText() {
        return m_text;
    }

    public SimpleNode(int i) {
        id = i;
    }

    public SimpleNode(jUCMNavParser p, int i) {
        this(i);
        parser = p;
    }

    public void jjtOpen() {
    }

    public void jjtClose() {
    }

    public void jjtSetParent(Node n) {
        parent = n;
    }

    public Node jjtGetParent() {
        return parent;
    }

    public void jjtAddChild(Node n, int i) {
        if (children == null) {
            children = new Node[i + 1];
        } else if (i >= children.length) {
            Node c[] = new Node[i + 1];
            System.arraycopy(children, 0, c, 0, children.length);
            children = c;
        }
        children[i] = n;
    }

    public Node jjtGetChild(int i) {
        return children[i];
    }

    public int jjtGetNumChildren() {
        return (children == null) ? 0 : children.length;
    }

    /*
     * You can override these two methods in subclasses of SimpleNode to customize the way the node appears when the tree is dumped. If your output uses more
     * than one line you should override toString(String), otherwise overriding toString() is probably all you need to do.
     */

    public String toString() {
        return jUCMNavParserTreeConstants.jjtNodeName[id];
    }

    public String toString(String prefix) {
        return prefix + toString();
    }

    /*
     * Override this method if you want to customize how the node dumps out its children.
     */

    public void dump(String prefix) {
        if (m_text != null && m_text.length() > 0)
            System.out.println(toString(prefix) + "[" + m_text + "]"); //$NON-NLS-1$ //$NON-NLS-2$
        else
            System.out.println(toString(prefix));
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                SimpleNode n = (SimpleNode) children[i];
                if (n != null) {
                    n.dump(prefix + " "); //$NON-NLS-1$
                }
            }
        }
    }

    public void dumpEvaluation(String prefix, UcmEnvironment env) {
        Object eval = UcmExpressionEvaluator.evaluate(this, env);
        if (eval == jUCMNavType.VOID)
            eval = ""; //$NON-NLS-1$
        if (m_text != null && m_text.length() > 0)
            System.out.println(toString(prefix) + "[" + m_text + "] == " + eval); //$NON-NLS-1$ //$NON-NLS-2$
        else
            System.out.println(toString(prefix) + " == " + eval); //$NON-NLS-1$
        if (children != null) {
            for (int i = 0; i < children.length; ++i) {
                SimpleNode n = (SimpleNode) children[i];
                if (n != null) {
                    n.dumpEvaluation(prefix + " ", env); //$NON-NLS-1$
                }
            }
        }
    }

    public int getId() {
        return id;
    }
}
