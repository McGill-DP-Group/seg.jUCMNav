<?xml version="1.0" encoding="UTF-8"?>
<!-- 
** WARNING **
This file is the main file to be used by jucmnav. 
build.xml is used for the update site only; as the wizards only work when build.xml is auto-generated, 
this file is kept here with the information necessary for a good build by cruisecontrol.

The build.fullzip task is called by build-seg.jUCMNav.xml in the cruisecontrol folder. 
-->
<project name="seg.jUCMNav" default="build.jars" basedir=".">

	<property name="bootclasspath" value=""/>
	<property name="ws" value="win32"/> <!-- JP: hard-code win32 because property not defined outside eclipse -->
	<property name="basews" value="${ws}"/>
	<property name="baseos" value="${os}"/>
	<property name="basearch" value="${arch}"/>
	<property name="basenl" value="${nl}"/>
	<property name="javacFailOnError" value="true"/>
	<property name="javacDebugInfo" value="on"/>
	<property name="javacVerbose" value="false"/>
	<property name="javacSource" value="1.5"/>
	<property name="javacTarget" value="1.5"/>
	<property name="compilerArg" value=""/>
	<property environment="env" />

	<!-- jucmnav classpath, _should_ be fairly cross-platform -->
	<patternset id="jucmnav.classpath">
		<include name="org.apache.lucene*.jar" />
		<include name="org.junit*/*.jar" />
		<include name="org.eclipse.core*.jar" />
		<include name="org.eclipse.draw*.jar" />
		<include name="org.eclipse.emf*.jar" />
		<include name="org.eclipse.equinox*.jar" />
		<include name="org.eclipse.gef*.jar" />
		<include name="org.eclipse.help*.jar" />
		<include name="org.eclipse.jface*.jar" />
		<include name="org.eclipse.osgi*.jar" />
		<include name="org.eclipse.swt*.jar" />
		<include name="org.eclipse.ui*.jar" />
		<include name="org.eclipse.update*.jar" />
		<include name="axis*.jar"/>
		<include name="commons*.jar"/>
		<include name="jaxrpc.jar"/>
		<include name="log4j*.jar"/>			
		<include name="saaj.jar"/>			
		<include name="wsdl4j*.jar"/>			
		<include name="org.eclipse.ocl*.jar"/>
		<include name="org.eclipse.search*.jar"/>
		<include name="org.eclipse.text*.jar"/>
	</patternset>
	<patternset id="jucmnav.lib.classpath">
		<include name="lib/*.jar" />
	</patternset>	
	<target name="testenv" depends="init">
		<echo>Eclipse Home: ${eclipsehome}</echo>
		<fileset id="test.classpath" dir="${eclipsehome}/plugins/">
			<patternset refid="jucmnav.classpath" />
		</fileset>
		<property name="testcp" refid="test.classpath" />
		<echo>Classpath: ${testcp}</echo>
		<fileset id="test.lib.classpath" dir="${basedir}/">
			<patternset refid="jucmnav.lib.classpath" />
		</fileset>
		<property name="testlibcp" refid="test.lib.classpath" />
		<echo>Lib Classpath: ${testlibcp}</echo>
	</target>

	<target name="init" depends="properties">
		<condition property="pluginTemp" value="${buildTempFolder}/eclipse/plugins">
			<isset property="buildTempFolder"/>
		</condition>
		<property name="pluginTemp" value="${basedir}"/>
		<condition property="build.result.folder" value="${pluginTemp}/seg.jUCMNav">
			<isset property="buildTempFolder"/>
		</condition>
		<property name="build.result.folder" value="${basedir}/build/"/>
		<property name="temp.folder" value="${basedir}/temp.folder"/>
		<property name="plugin.destination" value="${basedir}/build/"/>
		<property name="updatesite.destination" value="${plugin.destination}/updatesite" />
		<property name="updatesite.features" value="${updatesite.destination}/features" />
		<property name="updatesite.plugins" value="${updatesite.destination}/plugins" />

		<condition property="env.ECLIPSE_HOME" value="C:/work/cruisecontrol/testing/test-eclipse/eclipse">
			<and>
				<!-- If on windows, set a default ECLIPSE_HOME to c:/eclipse, don't overwrite if existing -->
				<os family="windows" />
				<not>
					<isset property="env.ECLIPSE_HOME"/>
				</not>
			</and>
		</condition>
		<property name="env.ECLIPSE_HOME" value="/opt/eclipse/" />
		<property name="eclipsehome" value="${env.ECLIPSE_HOME}" />
		
		<!-- <echo>Using ECLIPSE_HOME: ${eclipsehome}</echo> -->
		<tstamp>
			<!--
			JPDaigle: There are rules to respect when assigning a plugin version!
			we can't have a .0xx (leading zero) anywhere because eclipse removes it and filenames
			don't match from then on. (This is why there's a year and a 'v' before the time)
			The date formatter also cannot truncate a year to a single character so we're hardcoding
			'5' for 2005, TODO: change to '6', '7', etc. We can't use full year because of number overflow restrictions.
			GM: In 2010, we decided to use letters (i.e., A for 2010, B for 2011...).
			-->
			<format property="buildtime" pattern="'D'MMdd.'v'HHmm"/>
		</tstamp>
		

		<!-- A) this is the typically active setting; use either A) or B) but not both-->
		<condition property="jucmnav.version" value="5.4.${buildtime}">
			<not>
				<isset property="jucmnav.version"/>
			</not>
		</condition>
		
		<!-- B) use this when packaging; use either A) or B) but not both -->
		<!--
    	<property name="jucmnav.version" value="5.4.0" />
    	--> 
		<echo>Building version: ${jucmnav.version}</echo>
		
	</target>

	<target name="clean.buildjar" depends="init, clean">
		<antcall target="build.jars"/>
	</target>

	<target name="build.fullzip" depends="init, clean">
		<antcall target="clean"/>
		<antcall target="zip.plugin"/>
		<!-- <antcall target="runtests"/> -->
	</target>
	
	<target name="build.fullzip.exactversion">
		<antcall target="init">
			<param name="jucmnav.version" value="5.4.0"/>
			<param name="env.ECLIPSE_HOME" value="c:/work/cruisecontrol/testing/test-eclipse/eclipse/" />
		</antcall>
		<antcall target="clean">
			<param name="jucmnav.version" value="5.4.0"/>
			<param name="env.ECLIPSE_HOME" value="c:/work/cruisecontrol/testing/test-eclipse/eclipse/" />
		</antcall>
		<antcall target="zip.plugin">
			<param name="jucmnav.version" value="5.4.0"/>
			<param name="env.ECLIPSE_HOME" value="c:/work/cruisecontrol/testing/test-eclipse/eclipse/" />
		</antcall>
	</target>
			
	<target name="properties" if="eclipse.running">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
	</target>

	<target name="build.update.jar" depends="init" description="Build the plug-in: seg.jUCMNav for an update site.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<zip zipfile="${plugin.destination}/seg.jUCMNav_${jucmnav.version}.jar" basedir="${temp.folder}/seg.jUCMNav_${jucmnav.version}" filesonly="false" whenempty="skip" update="false"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="jUCMNav.jar" depends="init" unless="jUCMNav.jar" description="Create jar: jUCMNav.jar.">
		<delete dir="${temp.folder}/jUCMNav.jar.bin"/>
		<mkdir dir="${temp.folder}/jUCMNav.jar.bin"/>
		<!-- compile the source code -->
		<javac destdir="${temp.folder}/jUCMNav.jar.bin" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bootclasspath}" source="${javacSource}" target="${javacTarget}"		>
			<compilerarg line="${compilerArg}"/>
			<classpath>
				<fileset dir="${eclipsehome}/plugins/">
					<patternset refid="jucmnav.classpath" />
				</fileset>
				<fileset dir="${basedir}/">
					<patternset refid="jucmnav.lib.classpath" />
				</fileset>
			</classpath>
			<src path="src/"			/>
			</javac>
		<!-- Copy necessary resources -->
		<copy todir="${temp.folder}/jUCMNav.jar.bin" failonerror="true">
			<fileset dir="src/" excludes="**/*.java, **/package.htm*"			/>
		</copy>
		<mkdir dir="${build.result.folder}"/>
		<jar jarfile="${build.result.folder}/jUCMNav.jar" basedir="${temp.folder}/jUCMNav.jar.bin"/>
		<delete dir="${temp.folder}/jUCMNav.jar.bin"/>
	</target>

	<target name="jUCMNavsrc.zip" depends="init" unless="jUCMNavsrc.zip">
		<mkdir dir="${build.result.folder}"/>
		<zip zipfile="${build.result.folder}/jUCMNavsrc.zip" filesonly="false" whenempty="skip" update="false">
			<!-- want to add xml files too	<fileset dir="src/" includes="**/*.java"			/> -->
			<fileset dir="" includes="**/*.*" excludes="bin/**/*.*" />
		</zip>
	</target>

	<target name="build.jars" depends="init" description="Build all the jars for the plug-in: seg.jUCMNav.">
		<available property="jUCMNav.jar" file="${build.result.folder}/jUCMNav.jar"/>
		<antcall target="jUCMNav.jar"/>
	</target>

	<target name="build.sources" depends="init">
		<available property="jUCMNavsrc.zip" file="${build.result.folder}/jUCMNavsrc.zip"/>
		<antcall target="jUCMNavsrc.zip"/>
	</target>

	<target name="build.docs" depends="init">
		<!-- TODO: renable javadoc when command line is not too long. 
		<javadoc packagenames="seg.jUCMNav.*"
		           sourcepath="src"
		           excludepackagenames="seg.jUCMNav.Tests.*"
		           defaultexcludes="yes"
		           destdir="docs/api"
		           author="true"
		           version="true"
				   use="true"
				   breakiterator="yes"
			       additionalparam="-quiet -source 1.5"
		           windowtitle="jUCMNav"
			access="private">
			   <tag name="todo" scope="all" description="To do:" />
			<classpath>
				
				<fileset dir="${eclipsehome}/plugins/">
					<patternset refid="jucmnav.classpath" />
				</fileset>
				<fileset dir="${basedir}/">
					<patternset refid="jucmnav.lib.classpath" />
				</fileset>
			</classpath>
			
	</javadoc>
		<available property="jUCMNavsrc.zip" file="${build.result.folder}/jUCMNavsrc.zip"/>
		<antcall target="jUCMNavdocs.zip"/>
		-->
	</target>

	<target name="jUCMNavdocs.zip" depends="init">
		<mkdir dir="${build.result.folder}"/>
		<zip zipfile="${build.result.folder}/jUCMNavdocs.zip" filesonly="false" whenempty="skip" update="false">
			<fileset dir="" includes="docs/**"/>
		</zip>
	</target>
	
	<target name="gather.bin.parts" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/seg.jUCMNav_${jucmnav.version}"/>
		<copy todir="${destination.temp.folder}/seg.jUCMNav_${jucmnav.version}" failonerror="true">
			<fileset dir="${build.result.folder}" includes="jUCMNav.jar"			/>
		</copy>
		<copy todir="${destination.temp.folder}/seg.jUCMNav_${jucmnav.version}" failonerror="true">
			<fileset dir="${basedir}" includes="plugin.xml,jUCMNav.jar"			/>
		</copy>
	</target>

	<target name="build.zips" depends="init">
	</target>

	<target name="gather.sources" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/seg.jUCMNav_${jucmnav.version}"/>
		<copy file="${build.result.folder}/jUCMNavsrc.zip" todir="${destination.temp.folder}/seg.jUCMNav_${jucmnav.version}" failonerror="false"/>
	</target>

	<target name="gather.docs" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/seg.jUCMNav_${jucmnav.version}"/>
		<copy file="${build.result.folder}/jUCMNavdocs.zip" todir="${destination.temp.folder}/seg.jUCMNav_${jucmnav.version}" failonerror="false"/>
	</target>
	
	<target name="gather.logs" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/seg.jUCMNav_${jucmnav.version}"/>
		<copy file="${temp.folder}/jUCMNav.jar.bin.log" todir="${destination.temp.folder}/seg.jUCMNav_${jucmnav.version}" failonerror="false"/>
	</target>

	<target name="clean" depends="init" description="Clean the plug-in: seg.jUCMNav of all the zips, jars and logs created.">
		<delete file="testresults.xml"/>
		<delete>
			<!-- Lucky for us, Ant ignores the CVS folder and .cvsignore files -->
			<fileset dir="${build.result.folder}">
				<include name="**/*"/>
			</fileset>
			<fileset dir="${plugin.destination}">
				<include name="**/*"/>
			</fileset>
		</delete>
		<delete dir="${temp.folder}"/>
		<delete dir="docs/api"/>
	</target>

	<target name="refresh" depends="init" if="eclipse.running" description="Refresh this folder.">
		<eclipse.convertPath fileSystemPath="H:/eclipse/workspace/seg.jUCMNav" property="resourcePath"/>
		<eclipse.refreshLocal resource="${resourcePath}" depth="infinite"/>
	</target>

	<target name="zip.plugin" depends="init" description="Create a zip containing all the elements for the plug-in: seg.jUCMNav.">
		<delete dir="${temp.folder}/eclipse/plugins"/>
		<mkdir dir="${temp.folder}/eclipse/plugins"/>
		<antcall target="build.jars"/>
		<antcall target="build.sources"/>
		<antcall target="build.docs"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/eclipse/plugins/"/>
		</antcall>
		<!--
		<antcall target="gather.sources">
			<param name="destination.temp.folder" value="${temp.folder}/eclipse/plugins/"/>
		</antcall>
		<antcall target="gather.docs">
			<param name="destination.temp.folder" value="${temp.folder}/eclipse/plugins/"/>
		</antcall>
		-->
		<delete>
			<fileset dir="${temp.folder}" includes="**/*.bin.log"			/>
		</delete>

		<!-- Include test.xml in the zip for unit testing purposes -->
		<copy file="test.xml" todir="${temp.folder}/eclipse/plugins/seg.jUCMNav_${jucmnav.version}" />

		<!-- Include about.html in the zip -->
		<copy file="about.html" todir="${temp.folder}/eclipse/plugins/seg.jUCMNav_${jucmnav.version}" />
			
		<!-- Include help in the zip for integration with eclipse help-->
		<copy file="help.xml" todir="${temp.folder}/eclipse/plugins/seg.jUCMNav_${jucmnav.version}" />
		<copy file="help_contexts.xml" todir="${temp.folder}/eclipse/plugins/seg.jUCMNav_${jucmnav.version}" />

		<copy todir="${temp.folder}/eclipse/plugins/seg.jUCMNav_${jucmnav.version}" >
			<fileset dir="./">
				<include name="helpcontent/**/*.*"/>
			</fileset>
		</copy>
		
		<!-- Include plugin i18n strings for view names, etc -->
		<copy todir="${temp.folder}/eclipse/plugins/seg.jUCMNav_${jucmnav.version}" >
			<fileset dir="./">
				<include name="plugin*.properties"/>
			</fileset>
		</copy>
		
		<!-- Include OSGI plugin manifest -->
		<mkdir dir="${temp.folder}/seg.jUCMNav_${jucmnav.version}/META-INF"/>
		<copy todir="${temp.folder}/eclipse/plugins/seg.jUCMNav_${jucmnav.version}/META-INF">
		    <fileset dir="META-INF"/>
		</copy>

		
		<!-- jkealey: create icons directory, bug 238 -->
		<mkdir dir="${temp.folder}/seg.jUCMNav_${jucmnav.version}/icons"/>
		<copy todir="${temp.folder}/eclipse/plugins/seg.jUCMNav_${jucmnav.version}/icons">
		    <fileset dir="icons"/>
		</copy>
		<copy todir="${temp.folder}/eclipse/plugins/seg.jUCMNav_${jucmnav.version}/icons">
		    <fileset dir="src/seg/jUCMNav/icons"/>
		</copy>
					
		
		<!-- damyot: create lib directory, May 2, 2008 -->
		<mkdir dir="${temp.folder}/eclipse/plugins/seg.jUCMNav_${jucmnav.version}/lib"/>
		<copy todir="${temp.folder}/eclipse/plugins/seg.jUCMNav_${jucmnav.version}/lib">
		    <fileset dir="lib"/>
		</copy>
				
		<!-- damyot: create schema directory, May 2, 2008 -->
		<mkdir dir="${temp.folder}/eclipse/plugins/seg.jUCMNav_${jucmnav.version}/schema"/>
		<copy todir="${temp.folder}/eclipse/plugins/seg.jUCMNav_${jucmnav.version}/schema">
		    <fileset dir="schema"/>
		</copy>
				
		
		<zip zipfile="${plugin.destination}/seg.jUCMNav_${jucmnav.version}.zip" basedir="${temp.folder}" filesonly="true" whenempty="skip" update="false"/>
		<jar manifest="META-INF/MANIFEST.MF" jarfile="${plugin.destination}/seg.jUCMNav_${jucmnav.version}.jar" basedir="${temp.folder}/eclipse/plugins/seg.jUCMNav_${jucmnav.version}/" update="false" />
		<delete dir="${temp.folder}"/>
		<delete file="${plugin.destination}/jUCMNav.jar" />
	</target>
	
	<target name="mkupdate" description="Make update site files" depends="init,build.fullzip">
		<mkdir dir="${updatesite.features}" />
		<mkdir dir="${updatesite.plugins}" />

		<property name="dir.out" value="build/" />
		<property name="jar.basename" value="org.usecasemaps.jUCMNav" />
		
		<ant dir="updatesite/features/" description="Make feature jar" inheritall="true">
		</ant>
		<ant dir="updatesite/site/" description="Make site.xml" inheritall="true">
		</ant>

		<copy todir="${updatesite.features}" file="updatesite/features/build/${jar.basename}_${jucmnav.version}.jar" />
		<copy todir="${updatesite.destination}" file="updatesite/site/build/site.xml" />
		<move tofile="${updatesite.plugins}/seg.jUCMNav_${jucmnav.version}.jar" file="${plugin.destination}/seg.jUCMNav_plugin.jar" />
	</target>
	
	<!-- Tests are now run from a batch file called runtests.bat, invoked by the cruisecontrol task.
	<target name="runtests" depends="init, build.jars" description="Run unit tests on jUCMNav.jar">
		<junit printsummary="yes">
			<classpath>
				<pathelement location="${build.result.folder}jUCMNav.jar" />
				<fileset dir="${eclipsehome}/plugins">
					<include name="**/*.jar" />
				</fileset>
			</classpath>
			<test name="seg.jUCMNav.tests.TestAllTestSuite" outfile="testresults"/>
			<formatter type="xml" />
		</junit>
	</target>
	-->
	
</project>
